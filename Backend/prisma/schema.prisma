// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// models

model Year {
  id             Int             @id @unique @default(autoincrement())
  year           String          @unique
  startDate      DateTime        @db.Date
  endDate        DateTime        @db.Date
  subject        Subject[]
  subjectFaculty SubjectFaculty[]
  exam           Exam[]
  marks          Marks[]
  detain         Detain[]
}

enum Department {
  DCS
  DIT
  DCE
}

enum UserRole {
  Faculty
  HOD
  Admin
}

model User {
  id                 Int              @id @unique @default(autoincrement())
  userId             String           @unique
  name               String
  email              String           @unique
  password           String
  department         Department
  role               UserRole
  subjectCoordinator Subject[]
  subjectFaculty     SubjectFaculty[]
  exam               Exam[]
}

enum SubjectType {
  major
  elective
  universityElective
}

model Subject {
  id                 Int    @id @default(autoincrement())
  code               String @unique
  name               String
  semester           Int
  coordinatorId      Int
  subjectCoordinator User   @relation(fields: [coordinatorId], references: [id])
  type               SubjectType

  dep_IT    Boolean?
  dep_CE    Boolean?
  dep_CSE   Boolean?
  students  Student[]
  faculties SubjectFaculty[]
  exam      Exam[]

  theory_hour       Int?
  practical_hour    Int?
  theory_credite    Int?
  practical_credite Int?

  // internal marks
  theory_int_marks    Int?
  practical_int_marks Int?

  // external marks
  theory_ext_marks    Int?
  practical_ext_marks Int?

  yearId Int
  year   Year @relation(fields: [yearId], references: [id])
}


enum SubjectFacultyRole {
  SubjectCoordinator
  Faculty
}

model SubjectFaculty {
  id        String             @id @unique @default(uuid())
  facultyId Int
  faculty   User               @relation(fields: [facultyId], references: [id])
  subjectId Int
  subject   Subject            @relation(fields: [subjectId], references: [id])
  // department
  role      SubjectFacultyRole

  yearId Int  
  year   Year @relation(fields: [yearId], references: [id])
}

model Student {
  id         String     @id @unique @default(uuid())
  studentId  String        @unique
  name       String
  email      String     @unique
  department Department
  semester   Int
  div      String
  subjects   Subject[]
  exams      Exam[]
  marks      Marks[]
  detain     Detain[]
}

enum ExamStatus {
  taken
  notTaken
  pending
}

model Exam {
  id               String      @id @unique @default(uuid())
  name             String
  date             DateTime?   @db.Date
  subjectId        Int
  subject          Subject     @relation(fields: [subjectId], references: [id])
  facultyId        Int
  faculty          User        @relation(fields: [facultyId], references: [id])
  eligibleStudents Student[]
  totalMarks       Int?
  effectiveMarks   Int? // exam effective marks
  class1           Boolean?
  class2           Boolean?
  marks            Marks?
  detain           Detain[]
  status           ExamStatus?

  yearId Int  
  year   Year @relation(fields: [yearId], references: [id])
}

model Marks {
  id        String  @id @unique @default(uuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  earnedMarks    Int
  effectiveMarks Int // for each student
  examId         String @unique
  exam           Exam   @relation(fields: [examId], references: [id])

  yearId Int  
  year   Year @relation(fields: [yearId], references: [id])
}

model Detain {
  id        Int     @id @unique @default(autoincrement())
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  examId    String
  exam      Exam    @relation(fields: [examId], references: [id])

  yearId Int  
  year   Year @relation(fields: [yearId], references: [id])
}
